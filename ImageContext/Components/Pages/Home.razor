@page "/"
@using System.Data
@using ExifLib
@using Google
@using ImageContext.Components.Services
@using ImageMagick
@using Google.Apis.CustomSearchAPI;
@using Google.Apis.CustomSearchAPI.v1
@using Google.Apis.Services
@using OpenAI_API

@rendermode InteractiveServer

@inject GoogleServices googleServices;
@inject OpenAIService openAIService;
@inject WeatherService weatherService;

<PageTitle>Home</PageTitle>
<div class="container-fluid">
    <div class="row">
        <section class="col text-center">
            <h1 class="card-title">
                What Was Happening?
            </h1>
            <div class="scrollable-card d-flex flex-wrap justify-content-center">
                @foreach (var webResult in _webResults) 
                {
                    <a href="@webResult.link" class="polaroid-link">
                        <article class="small-polaroid">
                            <img src="@webResult.thumbnailUrl" alt="@webResult.snippet" />
                            <p>@webResult.title</p>
                        </article>
                    </a>
                }
            </div>
            <article class="button-title">
                <a href="@_twitterResultsUrl">
                    <h1>What Were People Tweeting?</h1>
                </a>
            </article>
        </section>
        <section class="col text-center">
            <p role="status">Message: @_resultMessage</p>
            <InputFile OnChange="FileUploaded" accept="image/*" />
            
            <br/>
            <div class="d-flex justify-content-center">
                <div class="large-polaroid">
                    <img src="@imageSource" alt="Polaroid Image" />
                    <h1>@_searchTerm</h1>
                    <h2>@_dateTaken.ToString("MMMM") @_dateTaken.Day, @_dateTaken.Year</h2>
                    
                </div>
            </div>
            <article class="single-title">
                <h1>@_weatherResult.temp F | @_weatherResult.windSpeed MPH | @_weatherResult.humidity</h1>
                <h2>Temperature  Wind Speed  Humidity</h2>
                <h2>@_weatherResult.description</h2>
            </article>
            @* <p>Coordinates: @_coordinateString</p> *@
            @* <p>Address: @_address</p> *@
            <p>Temperature: @_weatherResult.temp Feels Like: @_weatherResult.feelsLikeTemp Humidity: @_weatherResult.humidity Wind Speed: @_weatherResult.windSpeed Description: @_weatherResult.description</p>
        </section>
        <section class="col text-center">
            <h1 class="card-title">
                The History
            </h1>
            <article class="history-card">
                <p>@_historyOfAddress</p>
            </article>

            <article class="button-title">
                <a href="https://camschmidt.com">
                    <h1>About</h1>
                </a>
            </article>
        </section>
    </div>
</div>

@code {

    private DateTime lastSubmissionTime = DateTime.MinValue;

    // Example byte array for demonstration
    private byte[] imageBytes;

    private string imageBase64Data;
    private string imageMimeType = "image/jpeg"; // Adjust based on the image type
    private string imageSource;

    ExifExtractService.ImageMetadata imageMetadata;
    private DateTime _dateTaken;
    private string _coordinateString;
    private string _places;
    private string _address;
    private string _searchTerm;
    private string _historyOfAddress;
    private string _twitterResultsUrl = "";
    private List<WebResult> _webResults = new List<WebResult>();
    private WeatherResult _weatherResult = new WeatherResult();

    private string _resultMessage = "Waiting for file upload...";
    private const string SuccessMessage = "Image uploaded successfully";
    private const string InvalidFileMessage = "Error: Invalid file type";
    private const string NullMetadataMessage = "Error: Metadata not available";

    private async Task FileUploaded(InputFileChangeEventArgs e)
    {
        // Return if not a heif or jpeg file
        if (e.File.ContentType != "image/heif" && e.File.ContentType != "image/jpeg")
        {
            _resultMessage = InvalidFileMessage;
            return;
        }

        try
        {
            if (DateTime.Now < lastSubmissionTime.AddSeconds(45))
            {
                throw new Exception("Please wait before submitting another photo.");
            }

            // Update the last submission time
            lastSubmissionTime = DateTime.Now;

            // Read the file into a memory stream
            using var stream = new MemoryStream();
            await e.File.OpenReadStream(maxAllowedSize: 1024 * 6000).CopyToAsync(stream);
            stream.Position = 0;
            Console.WriteLine("Read file into memory stream");

            using var image = new MagickImage(stream);
            if (e.File.ContentType == "image/heif")
            {
                // Convert image to Jpg, flush stream, rewrite image to stream
                image.Format = MagickFormat.Jpg;
                await stream.FlushAsync();
                await image.WriteAsync(stream);
                stream.Position = 0;
            }

            image.Resize(512, 512);
            imageBytes = image.ToByteArray();
            imageBase64Data = Convert.ToBase64String(imageBytes);
            imageSource = $"data:image/jpeg;base64,{imageBase64Data}";
            stream.Position = 0;

            // Extract EXIF data from stream
            imageMetadata = await new ExifExtractService().ExtractExifData(stream);

            _resultMessage = SuccessMessage;

            if (imageMetadata.DateTaken != null)
            {
                _dateTaken = imageMetadata.DateTaken;
            }

            if (imageMetadata.Coordinates != null)
            {
                var lat = imageMetadata.Coordinates.Value.Item1.ToString();
                var lng = imageMetadata.Coordinates.Value.Item2.ToString();
                _coordinateString = $"Latitude: {lat} Longitude: {lng}";
                var geocodingData = await googleServices.GeocodingApi(lat, lng);

                var formatedAddresses = geocodingData;

                var year = _dateTaken.Year;
                var month = _dateTaken.Month;
                var day = _dateTaken.Day;

                _twitterResultsUrl = $"https://twitter.com/search?q=+geocode%3A{imageMetadata.Coordinates.Value.Item1}%2C{imageMetadata.Coordinates.Value.Item2}%2C2mi+since%3A{year}-{month}-{day - 1}+until%3A{year}-{month}-{day + 1}&src=typed_query";

                _address = await openAIService.AddressCorrection(formatedAddresses, imageBytes);
                _historyOfAddress = await openAIService.HistoryOfAddress(_address);
                _searchTerm = await openAIService.CreateOptimalSearchTerm(_address);

                _webResults = await googleServices.SearchApi(_searchTerm, imageMetadata.DateTaken);

                _weatherResult = await weatherService.GetWeatherDateLocation(lat, lng, imageMetadata.DateTaken);
            }
            else
            {
                _coordinateString = NullMetadataMessage;
                _places = NullMetadataMessage;
                _address = NullMetadataMessage;
            }
        }
        catch (ExifLibException ex)
        {
            _resultMessage = $"Error: {ex.Message}";
        }
        catch (Exception ex)
        {
            _resultMessage = $"Error: {ex.Message}";
        }


    }

}