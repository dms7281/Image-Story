@page "/"
@using System.Data
@using ExifLib
@using Google
@using ImageContext.Components.Services
@using ImageMagick
@using Google.Apis.CustomSearchAPI;
@using Google.Apis.CustomSearchAPI.v1
@using Google.Apis.Services
@using OpenAI_API

@rendermode InteractiveServer

@inject GoogleServices googleServices;
@inject OpenAIService openAIService;
@inject WeatherService weatherService;

<PageTitle>Home</PageTitle>

<div class="container-fluid">
    <div class="row" style="gap: 10px;">
        <div class="col text-center">
            <h1>What Was Happening?</h1>
            <div class="overflow-scroll d-flex justify-content-center" style="max-height: 75vh; overflow-y: auto;">
                <div class="d-flex flex-wrap" style="gap: 10px;">

                    @foreach (var webResult in _webResults)
                    {
                        <a href="@webResult.link" class="text-decoration-none">
                            <div class="card" style="width: 275px; height: 325px">
                                <img class="card-img-top" src="@webResult.thumbnailUrl" style="width: 225px; height: 225px; object-fit: cover;"/>
                                <div class="card-body">
                                    <h5 class="card-title">@webResult.title</h5>
                                </div>
                            </div>
                        </a>


                        @* <img src="@webResult.thumbnailUrl" alt="@webResult.title"/> *@
                        @* <p>@webResult.title</p> *@
                        @* <p>@webResult.snippet</p> *@
                        @* <a href="@webResult.link">@webResult.link</a> *@
                        @* <br/> *@
                    }

                </div>
            </div>

            <a href="@_twitterResultsUrl">Twitter Feed</a>
        </div>
        <div class="col text-center">
            <p role="status">Message: @_resultMessage</p>
            <div>Select your file:</div>
            <InputFile OnChange="FileUploaded" accept="image/*"/>
            <br/>
            <img src="@imageSource" alt="{@_address} on {@_dateTaken}"/>
            <p>Date Taken: @_dateTaken</p>
            <p>Coordinates: @_coordinateString</p>
            <p>Search Term: @_searchTerm</p>
            <p>Address: @_address</p>
            <p>Temperature: @_weatherResult.temp Feels Like: @_weatherResult.feelsLikeTemp Humidity: @_weatherResult.humidity Wind Speed: @_weatherResult.windSpeed Description: @_weatherResult.description</p>
        </div>
        <div class="col text-center">
            <h1>The History</h1>
            <p>History: @_historyOfAddress</p>
        </div>
    </div>
</div>

<script>
    function handleImageError(imgElement, fallbackUrl) {
        imgElement.onerror = null; // Prevent infinite loop if fallback also fails
        imgElement.src = fallbackUrl; // Set the fallback image URL
    }
</script>

@code {

    private DateTime lastSubmissionTime = DateTime.MinValue;

    // Example byte array for demonstration
    private byte[] imageBytes;

    private string imageBase64Data;
    private string imageMimeType = "image/jpeg"; // Adjust based on the image type
    private string imageSource;

    ExifExtractService.ImageMetadata imageMetadata;
    private string _dateTaken;
    private string _coordinateString;
    private string _places;
    private string _address;
    private string _searchTerm;
    private string _historyOfAddress;
    private string _twitterResultsUrl = "";
    private List<WebResult> _webResults = new List<WebResult>();
    private WeatherResult _weatherResult = new WeatherResult();

    private string _resultMessage = "Waiting for file upload...";
    private const string SuccessMessage = "Image uploaded successfully";
    private const string InvalidFileMessage = "Error: Invalid file type";
    private const string NullMetadataMessage = "Error: Metadata not available";

    private async Task FileUploaded(InputFileChangeEventArgs e)
    {
        // Return if not a heif or jpeg file
        if (e.File.ContentType != "image/heif" && e.File.ContentType != "image/jpeg")
        {
            _resultMessage = InvalidFileMessage;
            return;
        }

        try
        {
            if (DateTime.Now < lastSubmissionTime.AddSeconds(45))
            {
                throw new Exception("Please wait before submitting another photo.");
            }

            // Update the last submission time
            lastSubmissionTime = DateTime.Now;

            // Read the file into a memory stream
            using var stream = new MemoryStream();
            await e.File.OpenReadStream(maxAllowedSize: 1024 * 6000).CopyToAsync(stream);
            stream.Position = 0;
            Console.WriteLine("Read file into memory stream");

            using var image = new MagickImage(stream);
            if (e.File.ContentType == "image/heif")
            {
                // Convert image to Jpg, flush stream, rewrite image to stream
                image.Format = MagickFormat.Jpg;
                await stream.FlushAsync();
                await image.WriteAsync(stream);
                stream.Position = 0;
            }

            image.Resize(512, 512);
            imageBytes = image.ToByteArray();
            imageBase64Data = Convert.ToBase64String(imageBytes);
            imageSource = $"data:image/jpeg;base64,{imageBase64Data}";
            stream.Position = 0;

            // Extract EXIF data from stream
            imageMetadata = await new ExifExtractService().ExtractExifData(stream);

            _resultMessage = SuccessMessage;

            if (imageMetadata.DateTaken != null)
            {
                _dateTaken = imageMetadata.DateTaken.ToString();
            }
            else
            {
                _dateTaken = NullMetadataMessage;
            }

            if (imageMetadata.Coordinates != null)
            {
                var lat = imageMetadata.Coordinates.Value.Item1.ToString();
                var lng = imageMetadata.Coordinates.Value.Item2.ToString();
                _coordinateString = $"Latitude: {lat} Longitude: {lng}";
                var geocodingData = await googleServices.GeocodingApi(lat, lng);

                var formatedAddresses = geocodingData;

                var year = imageMetadata.DateTaken.Year;
                var month = imageMetadata.DateTaken.Month;
                var day = imageMetadata.DateTaken.Day;

                _twitterResultsUrl = $"https://twitter.com/search?q=+geocode%3A{imageMetadata.Coordinates.Value.Item1}%2C{imageMetadata.Coordinates.Value.Item2}%2C2mi+since%3A{year}-{month}-{day - 1}+until%3A{year}-{month}-{day + 1}&src=typed_query";

                _address = await openAIService.AddressCorrection(formatedAddresses, imageBytes);
                _historyOfAddress = await openAIService.HistoryOfAddress(_address);
                _searchTerm = await openAIService.CreateOptimalSearchTerm(_address);

                _webResults = await googleServices.SearchApi(_searchTerm, imageMetadata.DateTaken);

                _weatherResult = await weatherService.GetWeatherDateLocation(lat, lng, imageMetadata.DateTaken);
            }
            else
            {
                _coordinateString = NullMetadataMessage;
                _places = NullMetadataMessage;
                _address = NullMetadataMessage;
            }
        }
        catch (ExifLibException ex)
        {
            _resultMessage = $"Error: {ex.Message}";
        }
        catch (Exception ex)
        {
            _resultMessage = $"Error: {ex.Message}";
        }


    }

}