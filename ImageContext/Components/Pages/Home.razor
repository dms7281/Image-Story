@page "/"
@using System.Data
@using ExifLib
@using Google
@using ImageContext.Components.Services
@using ImageMagick
@using Google.Apis.CustomSearchAPI;
@using Google.Apis.CustomSearchAPI.v1
@using Google.Apis.Services
@using OpenAI_API
@using RestSharp

@rendermode InteractiveServer

@inject IJSRuntime JS
@inject GoogleServices googleServices;
@inject OpenAIService openAIService;
@inject WeatherService weatherService;

<PageTitle>Home</PageTitle>
@if (_isInitialized)
{
    if (IsOverlayVisible)
    {
        <div class="privacy-policy-overlay">
            <div>
                <h1>Privacy Policy</h1>
                <p>
                    Uploaded images are not permanently stored by this application.
                    Image metadata may be accessed and used as input for external APIs to enhance or retrieve relevant information.
                    No personal data or images are retained after processing.
                </p>
                <button @onclick="CloseOverlay">I Understand</button>
            </div>
        </div>
    }
}

<div class="container-fluid">
    <div class="row">
        <section class="col-lg-4 col-sm-12 text-center">
            @if (webResultsLoaded)
            {
                <h1 class="section-header-black">
                    What Was Happening?
                </h1>
                <div class="scrollable-card d-flex flex-wrap justify-content-center">
                    @foreach (var webResult in _webResults)
                    {
                        <a href="@webResult.link" class="mini-polaroid-link">
                            <article>
                                @if (webResult.thumbnailUrl != null)
                                {
                                    <img src="@webResult.thumbnailUrl" alt="@webResult.snippit"/>
                                }
                                else
                                {
                                    <img src="nophoto.png"/>
                                }
                                <p>@webResult.title</p>
                            </article>
                        </a>
                    }
                </div>
            }
            
            @if (twitterLoaded)
            {
                <article class="section-header-white-link">
                    <a href="@_twitterResultsUrl">
                        <h1>What Were People Tweeting?</h1>
                    </a>
                </article>
            }
        </section>
        <section class="col-lg-4 col-sm-12 text-center">
            @if (!string.IsNullOrEmpty(_resultMessage))
            {
                <div class="alert alert-success alert-dismissible fade show floating-alert" role="alert" id="alertMessage">
                    <strong>@_resultMessage</strong>
                    <button type="button" class="btn-close" @onclick="DismissAlert" aria-label="Close"></button>
                </div>
            }
            @if (!string.IsNullOrEmpty(_exceptionMessage))
            {
                <div class="alert alert-danger alert-dismissible fade show floating-alert" role="alert" id="alertMessage">
                    <strong>@_exceptionMessage</strong>
                    <button type="button" class="btn-close" @onclick="DismissAlert" aria-label="Close"></button>
                </div>
            }

            <InputFile OnChange="FileUploaded" accept="image/*"/>

            <div class="d-flex flex-wrap justify-content-center">
                <div class="large-polaroid">
                    @if (imageLoaded)
                    {
                        <img src="@imageSource" alt="Polaroid Image"/>
                    }
                    else
                    {
                        <img src="nophoto.png"/>
                    }
                    @if (searchTermLoaded)
                    {
                        <h1>@_searchTerm</h1>
                    }
                    @if (dateLoaded)
                    {
                        <h2>@_dateTaken.ToString("MMMM") @_dateTaken.Day, @_dateTaken.Year</h2>
                    }

                </div>
            </div>


            @if (weatherLoaded)
            {
                <div class="d-flex justify-content-center">
                    <article class="polaroid-extend-weather">
                        <table>
                            <tr>
                                <th>@((int)_weatherResult.temp)&deg;F</th>
                                <th>@((int)_weatherResult.windSpeed)MPH</th>
                                <th>@((int)_weatherResult.humidity)&deg;</th>
                            </tr>
                            <tr>
                                <td>Temperature</td>
                                <td>Wind Speed</td>
                                <td>Humidity</td>
                            </tr>
                            <tr>
                                <td colspan="3">@_weatherResult.desc</td>
                            </tr>

                        </table>
                    </article>
                </div>
            }
            @* <p>Coordinates: @_coordinateString</p> *@
            @* <p>Address: @_address</p> *@
        </section>
        <section class="col-lg-4 col-sm-12 text-center">
            @if (historyLoaded)
            {
                <h1 class="section-header-black">
                    The History
                </h1>
                <article class="history-card">
                    <p>@_historyOfAddress</p>
                </article>
            }
            
            @if (imageLoaded)
            {
                <article class="section-header-white-link">
                    <a href="https://camschmidt.com">
                        <h1>About</h1>
                    </a>
                </article>
            }
        </section>
    </div>
</div>

@code {
    private bool IsOverlayVisible = true;
    private bool _isInitialized = false;
    private string _resultMessage;
    private string _exceptionMessage;

    private DateTime lastSubmissionTime = DateTime.MinValue;
    
    private string imageSource;

    //ExifExtractService.ImageMetadata imageMetadata;
    private DateTime _dateTaken;
    private (double, double)? _coordinates;
    private string _places;
    private string _address;
    private string _searchTerm;
    private string _historyOfAddress;
    private string _twitterResultsUrl = "";
    private List<(string title, string link, string snippit, string? thumbnailUrl)>? _webResults = new List<(string, string, string, string?)>();
    private (double temp, double humidity, double windSpeed, string desc) _weatherResult;

    private bool imageLoaded;
    private bool dateLoaded;
    private bool coordinatesLoaded;
    private bool weatherLoaded;
    private bool twitterLoaded;
    private bool searchTermLoaded;
    private bool webResultsLoaded;
    private bool historyLoaded;

    private async Task FileUploaded(InputFileChangeEventArgs e)
    {
        imageLoaded = false;
        dateLoaded = false;
        coordinatesLoaded = false;
        weatherLoaded = false;
        twitterLoaded = false;
        searchTermLoaded = false;
        webResultsLoaded = false;
        historyLoaded = false;

        try
        {
            // Throw error if not a heif or jpeg file
            if (e.File.ContentType != "image/heif" && e.File.ContentType != "image/jpeg")
            {
                throw new Exception("Unsupported File Format");
            }
            
            if (DateTime.Now < lastSubmissionTime.AddSeconds(45))
            {
                throw new Exception("Please wait before submitting another photo.");
            }

            // Update the last submission time
            lastSubmissionTime = DateTime.Now;

            // Read the file into a memory stream
            using var stream = new MemoryStream();
            await e.File.OpenReadStream(maxAllowedSize: 1024 * 6000).CopyToAsync(stream);
            stream.Position = 0;
            Console.WriteLine("Read file into memory stream");

            var image = new MagickImage(stream);
            if (e.File.ContentType == "image/heif")
            {
                // Convert image to Jpg, flush stream, rewrite image to stream
                image.Format = MagickFormat.Jpg;
                await stream.FlushAsync();
                await image.WriteAsync(stream);
                stream.Position = 0;
            }

            image.Resize(1024, 1024);
            imageSource = $"data:image/jpeg;base64,{image.ToBase64()}";
            imageLoaded = true;
            StateHasChanged();

            // Helper method to extract Exif data
            IExifValue<TValueType>? GetExifData<TValueType>(ExifTag<TValueType> tag) => image.GetExifProfile()?.GetValue(tag);

            // Retrieve Exif values once
            var dateTaken = GetExifData(ExifTag.DateTimeOriginal)?.Value;
            var latDms = GetExifData(ExifTag.GPSLatitude)?.Value;
            var latHem = GetExifData(ExifTag.GPSLatitudeRef)?.Value;
            var lngDms = GetExifData(ExifTag.GPSLongitude)?.Value;
            var lngHem = GetExifData(ExifTag.GPSLongitudeRef)?.Value;

            bool coordinatesExist = latDms != null && latHem != null && lngDms != null && lngHem != null;

            // Cases based on available data
            if (dateTaken != null && coordinatesExist)
            {
                _dateTaken = DateTime.ParseExact(dateTaken, "yyyy:MM:dd HH:mm:ss", null);
                dateLoaded = true;

                _coordinates = (
                    ConvertGpsToDecimal(latDms, latHem),
                    ConvertGpsToDecimal(lngDms, lngHem)
                );
                coordinatesLoaded = true;

                await DateAndLocation(_dateTaken, _coordinates.Value);

                _resultMessage = "Image Uploaded Successfully";
            }
            else
            {
                throw new Exception("Metadata not available");
            }

            async Task DateAndLocation(DateTime dateTaken, (double, double) coordinates)
            {
                var lat = coordinates.Item1;
                var lng = coordinates.Item2;
                
                _twitterResultsUrl = $"https://twitter.com/search?q=+geocode%3A{lat}%2C{lng}%2C2mi+since%3A{dateTaken.Year}-{dateTaken.Month}-{dateTaken.Day - 1}+until%3A{dateTaken.Year}-{dateTaken.Month}-{dateTaken.Day + 1}&src=typed_query";
                twitterLoaded = true;
                StateHasChanged();
                
                _weatherResult = await weatherService.GetWeatherDateLocation(coordinates, dateTaken);
                weatherLoaded = true;
                StateHasChanged();
                
                var formatedAddresses = await googleServices.GeocodingApi(coordinates);
                _address = await openAIService.AddressCorrection(formatedAddresses, image.ToByteArray());
                _searchTerm = await openAIService.CreateOptimalSearchTerm(_address);
                searchTermLoaded = true;
                StateHasChanged();
                
                _webResults = await googleServices.SearchLocationTime(_searchTerm, dateTaken);
                webResultsLoaded = true;
                StateHasChanged();
                
                _historyOfAddress = await openAIService.HistoryOfAddress(_address);
                historyLoaded = true;
                StateHasChanged();
            }

            // async Task LocationOnly((double, double) coordinates)
            // {
            //     var lat = coordinates.Item1;
            //     var lng = coordinates.Item2;
            //
            //     _twitterResultsUrl = $"https://twitter.com/search?q=+geocode%3A{lat}%2C{lng}%2C2mi&src=typed_query";
            //
            //     var formatedAddresses = await googleServices.GeocodingApi(coordinates);
            //     _address = await openAIService.AddressCorrection(formatedAddresses, image.ToByteArray());
            //     _historyOfAddress = await openAIService.HistoryOfAddress(_address);
            //     _searchTerm = await openAIService.CreateOptimalSearchTerm(_address);
            //
            //     _webResults = await googleServices.SearchLocation(_searchTerm);
            //
            //     _weatherResult = await weatherService.GetWeatherDateLocation(coordinates, DateTime.Now);
            // }
            //
            // async Task DateOnly(DateTime dateTaken)
            // {
            //     _twitterResultsUrl = $"https://twitter.com/search?q=+since%3A{dateTaken.Year}-{dateTaken.Month}-{dateTaken.Day - 1}+until%3A{dateTaken.Year}-{dateTaken.Month}-{dateTaken.Day + 1}&src=typed_query";
            //     
            //     _searchTerm = ""; // Search Term is nothing, results in top results from around the day the photo was taken
            //     
            //     _webResults = await googleServices.SearchLocationTime(_searchTerm, dateTaken);
            // }
        }
        catch (ExifLibException ex)
        {
            _exceptionMessage = $"Error: {ex.Message}";
        }
        catch (Exception ex)
        {
            _exceptionMessage = $"Error: {ex.Message}";
        }
    }
    
    static double ConvertGpsToDecimal(Rational[] coordinate, string? hemisphere)
    {
        var degrees = coordinate[0].ToDouble(); var minutes = coordinate[1].ToDouble(); var seconds = coordinate[2].ToDouble();

        var decimalCoordinate = degrees + (minutes / 60) + (seconds / 3600);

        // Adjust for hemisphere (N, S, E, W)
        if (hemisphere == "S" || hemisphere == "W") decimalCoordinate = -1 * decimalCoordinate;
            
        return decimalCoordinate;
    }
    
    private async Task DismissAlert()
    {
        await JS.InvokeVoidAsync("dismissAlert", "#alertMessage");
        _exceptionMessage = null; // Clear message after dismissal
    }
    
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            // Initially hide the overlay
            IsOverlayVisible = false;

            // Check if the overlay visibility is stored in sessionStorage
            var storedValue = await JS.InvokeAsync<string>("overlayStorage.getItem", "overlayClosed");
            if (storedValue != "true")
            {
                IsOverlayVisible = true; // Show overlay only if not closed
            }

            _isInitialized = true; // Mark that initialization is done
            StateHasChanged(); // Trigger a re-render with the updated visibility state
        }
    }

    private async Task CloseOverlay()
    {
        IsOverlayVisible = false;

        // Store in sessionStorage that the overlay has been closed
        await JS.InvokeVoidAsync("overlayStorage.setItem", "overlayClosed", "true");
    }
}